
//Generated by Chat GPT 3.5
export class NodeItem<T> {
  data: T;
  next: NodeItem<T> | null;

  constructor(data: T) {
    this.data = data;
    this.next = null;
  }
}

export class Queue<T> {
  private front: NodeItem<T> | null;
  private rear: NodeItem<T> | null;
  private size: number;

  constructor() {
    this.front = null;
    this.rear = null;
    this.size = 0;
  }

  enqueue(data: T): void {
    const newNodeItem = new NodeItem(data);
    if (!this.rear) {
      this.front = newNodeItem;
      this.rear = newNodeItem;
    } else {
      this.rear.next = newNodeItem;
      this.rear = newNodeItem;
    }
    this.size++;
  }

  dequeue(): T | undefined {
    if (!this.front) {
      return undefined; // Queue is empty
    }

    const removedNodeItem = this.front;
    this.front = this.front.next;
    if (!this.front) {
      this.rear = null; // Queue is now empty
    }
    this.size--;

    return removedNodeItem.data;
  }

  getSize(): number {
    return this.size;
  }

  isEmpty(): boolean {
    return this.size === 0;
  }

  peek(): T | undefined {
    return this.front ? this.front.data : undefined;
  }
}